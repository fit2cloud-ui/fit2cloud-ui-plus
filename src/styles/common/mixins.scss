@use 'function' as *;
@use 'config' as *;
$B: null;
$E: null;

// BEM
@mixin b($block) {

  $B: $namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content
  }
}

@mixin flex-row($justify: flex-start, $align: stretch) {
  display: flex;
  @if $justify != flex-start {
    justify-content: $justify;
  }
  @if $align != stretch {
    align-items: $align;
  }
}

@mixin active-scale($scale:0.95) {
  &:active {
    transform: scale($scale);
  }
}

@mixin set-css-var($name, $value) {
  #{joinVarName($name)}: #{$value};
}

@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    #{getCssVarName($name, $attribute)}: #{$value};
  }
}
